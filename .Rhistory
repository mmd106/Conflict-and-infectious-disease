#install.packages("ismev")               # if not installed!
library(ismev)
library(magrittr)
library(mgcv)
library(tidyverse)
# Read in the data
anoph <- read_csv('C:/Users/cjcar/Dropbox/AnophElev/clean/Anopheles clean.csv')[,-c(1:2)]
anoph
# Recenter years, and eliminate recent years which are data deficient (relatively)
anoph %<>% mutate(Year = (Year - 1900))
hist(anoph$Year)
table(anoph$Year)
anoph %<>% filter(Year < 115)
# Pull out wellcomei and check it out
anoph %>% filter(Species == 'wellcomei') -> well
ggplot(well, aes(x = Year, y = Lat)) + #geom_point(alpha = 0.3) +
stat_binhex() + scale_fill_gradient(low = 'blue', high = 'red')
# Pull out Southern latitudes (reverse sign), one max per year, and run a regression just as a check
well %>% mutate(AbsLat = -1*Lat) %>%
group_by(Year) %>% top_n(AbsLat, n = 1) -> well.max
well.lm<- lm(AbsLat ~ Year, data = well.max)
summary(well.lm)
plot(AbsLat ~ Year, well.max)
abline(well.lm)
# Now... how to do this as a GAM
m1 <- gam(list(AbsLat ~ Year,
~ s(Year),
~ 1),
data = well.max, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
plot(m1, all.terms = TRUE)
mu <- fitted(m1)[,1]
rho <- fitted(m1)[,2]
xi <- fitted(m1)[,3]
fv <- mu + exp(rho)*(gamma(1-xi)-1)/xi
plot(fv ~ well$Year)
fv
well$Year
plot(fv ~ well.max$Year)
plot(fv ~ well.max$AbsLat)
plot(m1, pages = 1, all.terms = TRUE)
m1
summary(m1)
summary(well.lm)
# Pull out Southern latitudes (reverse sign), one max per year, and run a regression just as a check
well %>% mutate(AbsLat = -1*Lat) %>%
group_by(Year) %>% top_n(AbsLat, n = 1) -> well.max
well.lm<- lm(AbsLat ~ Year, data = well.max)
summary(well.lm)
plot(AbsLat ~ Year, well.max)
abline(well.lm)
m1 <- gam(list(AbsLat ~ Year,
~ s(Year),
~ 1),
data = well.max, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
summary(m1)
# Is this correct? It doesn't seem correct - pulled it off https://stat.ethz.ch/R-manual/R-patched/library/mgcv/html/gevlss.html
mu <- fitted(m1)[,1]
rho <- fitted(m1)[,2]
xi <- fitted(m1)[,3]
fv <- mu + exp(rho)*(gamma(1-xi)-1)/xi
plot(fv ~ well.max$AbsLat)
plot(fv ~ well.max$Year)
plot(fv ~ well.max$Year)
plot(well.max$AbsLat ~ well.max$Year)
points(fv ~ well.max$Year, col='red')
m1 <- gam(list(AbsLat ~ Year,
~ Year,
~ 1),
data = well.max, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
summary(m1)
plot(m1, pages = 1, all.terms = TRUE)
mu <- fitted(m1)[,1]
rho <- fitted(m1)[,2]
xi <- fitted(m1)[,3]
fv <- mu + exp(rho)*(gamma(1-xi)-1)/xi
plot(fv ~ well.max$AbsLat)
plot(well.max$AbsLat ~ well.max$Year)
points(fv ~ well.max$Year, col='red')
m1 <- gam(list(AbsLat ~ s(Year),
~ s(Year),
~ 1),
data = well.max, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
summary(m1)
plot(m1, pages = 1, all.terms = TRUE)
# Is this correct? It doesn't seem correct - pulled it off https://stat.ethz.ch/R-manual/R-patched/library/mgcv/html/gevlss.html
mu <- fitted(m1)[,1]
rho <- fitted(m1)[,2]
xi <- fitted(m1)[,3]
fv <- mu + exp(rho)*(gamma(1-xi)-1)/xi
plot(fv ~ well.max$AbsLat)
plot(well.max$AbsLat ~ well.max$Year)
points(fv ~ well.max$Year, col='red')
m1 <- gam(list(AbsLat ~ s(Year) + s(Lat),
~ s(Year) + s(Lat),
~ 1),
data = well.max, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
#devtools::install_github("ecohealthalliance/lemis")
#library(lemis)
#all_lemis <- lemis_data() %>%
#  collect()
library(tidyverse)
lem <- read_csv("C:/Users/cjcar/Downloads/lemis_2000_2014_cleaned.csv")
lem
lem %>% filter(genus == "Rhinolophus")
lem %>% filter(genus == "Rhinolophus") %>% View()
lem %>% filter(genus == "Rhinolophus") %>% View()
lemis_codes()
lem %>% filter(genus == "Rhinolophus") %>% filter(purpose == "I") %>% View()
lem %>% filter(genus == "Rhinolophus") %>% select(purpose) %>% table()
setwd("~/GitHub/virionette/03_interaction_data/virionette.csv")
vir <- read_csv("~/GitHub/virionette/03_interaction_data/virionette.csv")
vir
vir %>% filter(virus_genus == 'Betacoronavirus') %>% select(host_species) -> betacov.hosts
betacov.hosts
vir %>% filter(virus_genus == 'Betacoronavirus') %>% select(host_species) %>% pull -> betacov.hosts
betacov.hosts
lem
lem %>% unite(genus, species)
lem %>% unite("Name", genus, species, sep = " ")
lem %>% unite("Name", genus, species, sep = " ") -> lem
lem$Name[1]
lem$Name[2]
lem$Name[3]
lem %>% filter(Name %in% betacov.hosts) -> lem.b
length(betacov.hosts)
vir %>% filter(virus_genus == 'Betacoronavirus') %>% select(host_species) %>% pull %>% unique() -> betacov.hosts
length(betacov.hosts) #118 species
View(betacov.hosts)
lem.b
View(lem.b)
table(lem.b$purpose)
table(lem$purpose)
lem <- read_csv("C:/Users/cjcar/Downloads/lemis_2000_2014_cleaned.csv")
lem %>% filter(genus == "Rhinolophus") %>% View()
lem %>% filter(genus == "Rhinolophus") %>% select(source) %>% pull %>% table
lem %>% unite("Name", genus, species, sep = " ") -> lem
lem %>% filter(Name %in% betacov.hosts) -> lem.b
table(lem.b$source)
lem %>% filter(source = "I")
lem %>% filter(source == "I")
lem.b %>% filter(source == "I") %>% View()
lem.b %>% pull(control_number)
lem %>% filter(control_number %in% shipments) %>% filter(!(Name %in% betacov.hosts)) # Other species they've been shipped with at all
lem.b %>% filter(source == "I") %>% View() # Look at the illegal shipments
lem.b %>% pull(control_number) -> shipments # Shipments that betacov hosts have been in
source('C:/Users/cjcar/Desktop/wt.R', echo=TRUE)
lem %>% filter(control_number %in% shipments) %>% filter(!(Name %in% betacov.hosts)) # Other species they've been shipped with at all
lem %>% filter(control_number %in% shipments) %>% filter(!(Name %in% betacov.hosts)) %>%
pull(Name) %>% unique() %>% length # Other species they've been shipped with at all
lem.b %>% filter(source == "I") %<% pull(control_number) -> illegal.shipments # Shipments that betacov hosts have been in
lem.b %>% filter(source == "I") %>% pull(control_number) -> illegal.shipments # Shipments that betacov hosts have been in
illegal.shipments
lem %>% filter(control_number %in% illegal.shipments) %>% filter(!(Name %in% betacov.hosts)) %>%
pull(Name) %>% unique() %>% length # Other species they've been shipped with at all
lem %>% filter(control_number %in% illegal.shipments)
lem %>% filter(control_number %in% illegal.shipments) %>% filter(!(Name %in% betacov.hosts)) %>%
pull(Name)
lem %>% filter(control_number %in% illegal.shipments) %>% filter(!(Name %in% betacov.hosts)) %>%
pull(Name) %>% unique()
#devtools::install_github("ecohealthalliance/lemis")
#library(lemis)
#all_lemis <- lemis_data() %>%
#  collect()
library(tidyverse)
# Betacov hosts
vir <- read_csv("~/GitHub/virionette/03_interaction_data/virionette.csv")
vir %>% filter(virus_genus == 'Betacoronavirus') %>% select(host_species) %>% pull %>% unique() -> betacov.hosts
length(betacov.hosts) #118 species
# LEMIS
lem <- read_csv("C:/Users/cjcar/Downloads/lemis_2000_2014_cleaned.csv")
lem %>% filter(genus == "Rhinolophus") %>% View() # Rhinolophus example
lem %>% filter(genus == "Rhinolophus") %>% select(source) %>% pull %>% table # Rhino source example
lem %>% unite("Name", genus, species, sep = " ") -> lem # Fix naming system
lem %>% filter(Name %in% betacov.hosts) -> lem.b # Pull betacov hosts
table(lem.b$source) # 10 illegal
lem.b %>% filter(source == "I") %>% View() # Look at the illegal shipments
lem.b %>% pull(control_number) -> shipments # Shipments that betacov hosts have been in
lem %>% filter(control_number %in% shipments) %>% filter(!(Name %in% betacov.hosts)) %>%
pull(Name) %>% unique() %>% length # Other species they've been shipped with at all
lem.b %>% filter(source == "I") %>% pull(control_number) -> illegal.shipments # Shipments that betacov hosts have been in
lem %>% filter(control_number %in% illegal.shipments) %>% filter(!(Name %in% betacov.hosts)) %>%
pull(Name) %>% unique() %>% length # Other species they've been shipped with at all
table(lem.b$source) # 10 illegal
lem.b
table(lem.b$description)
lem.b %>% filter(description == 'LIV')
lem.b %>% filter(description == 'LIV') %>% table(source)
lem.b %>% filter(description == 'LIV') %>% pull(source) %>% table()
lem.b %>% filter(description == 'LIV') %>% pull(Name) %>% table()
#install.packages("ismev")               # if not installed!
library(ismev)
library(magrittr)
library(mgcv)
library(tidyverse)
deshape <- function(df) {
x <- df[,1]; y <- df[,2]; z <- df[,3]
x + exp(y)*(gamma(1-z)-1)/z
}
derivative.fit <- function(fit, derivs) {
mu <- fit[,1]
rho <- fit[,2]
chi <- fit[,3]
derivs %>% filter(smooth == "s(Year)") %>% select(derivative) -> dmu
derivs %>% filter(smooth == "s.1(Year)") %>% select(derivative) -> drho
derivs %>% filter(smooth == "s.2(Year)") %>% select(derivative) -> dchi
term1 <- dmu + drho*exp(rho)*( (gamma(1-chi) - 1) / chi)
term2 <- dchi*(gamma(1-chi) - 1 + chi*gamma(chi)*pracma::psi(0, chi))
term3 <- exp(rho) * ( term2 / chi^2)
return(term1 - term3)
}
# Read in the data
anoph <- read_csv('C:/Users/cjcar/Dropbox/AnophElev/clean/Anopheles clean.csv')[,-c(1:2)]
anoph
# Recenter years, and eliminate recent years which are data deficient (relatively)
anoph %<>% mutate(Year = (Year - 1900))
hist(anoph$Year)
table(anoph$Year)
anoph %<>% filter(Year < 115)
anoph %<>% mutate(Species = factor(Species))
anoph %>% mutate(AbsLat = -1*Lat) %>%
group_by(Year) %>% top_n(AbsLat, n = 1) -> anoph
anoph
#install.packages("ismev")               # if not installed!
library(ismev)
library(magrittr)
library(mgcv)
library(tidyverse)
deshape <- function(df) {
x <- df[,1]; y <- df[,2]; z <- df[,3]
x + exp(y)*(gamma(1-z)-1)/z
}
derivative.fit <- function(fit, derivs) {
mu <- fit[,1]
rho <- fit[,2]
chi <- fit[,3]
derivs %>% filter(smooth == "s(Year)") %>% select(derivative) -> dmu
derivs %>% filter(smooth == "s.1(Year)") %>% select(derivative) -> drho
derivs %>% filter(smooth == "s.2(Year)") %>% select(derivative) -> dchi
term1 <- dmu + drho*exp(rho)*( (gamma(1-chi) - 1) / chi)
term2 <- dchi*(gamma(1-chi) - 1 + chi*gamma(chi)*pracma::psi(0, chi))
term3 <- exp(rho) * ( term2 / chi^2)
return(term1 - term3)
}
# Read in the data
anoph <- read_csv('C:/Users/cjcar/Dropbox/AnophElev/clean/Anopheles clean.csv')[,-c(1:2)]
anoph
# Recenter years, and eliminate recent years which are data deficient (relatively)
anoph %<>% mutate(Year = (Year - 1900))
hist(anoph$Year)
table(anoph$Year)
anoph %<>% filter(Year < 115)
anoph %<>% mutate(Species = factor(Species))
anoph %>% mutate(AbsLat = -1*Lat) %>%
group_by(Species, Year) %>% top_n(AbsLat, n = 1) -> anoph
anoph
table(anoph$Species)
all.sp <- gam(list(AbsLat ~ s(Year, Species, bs = 'fs'),
~ s(Year, Species, bs = 'fs'),
~ s(Year, Species, bs = 'fs')),
data = anoph, method = "REML",
family = gevlss(link = list("identity", "identity", "logit")))
#install.packages("ismev")               # if not installed!
library(ismev)
library(magrittr)
library(mgcv)
library(tidyverse)
deshape <- function(df) {
x <- df[,1]; y <- df[,2]; z <- df[,3]
x + exp(y)*(gamma(1-z)-1)/z
}
derivative.fit <- function(fit, derivs) {
mu <- fit[,1]
rho <- fit[,2]
chi <- fit[,3]
derivs %>% filter(smooth == "s(Year)") %>% select(derivative) -> dmu
derivs %>% filter(smooth == "s.1(Year)") %>% select(derivative) -> drho
derivs %>% filter(smooth == "s.2(Year)") %>% select(derivative) -> dchi
term1 <- dmu + drho*exp(rho)*( (gamma(1-chi) - 1) / chi)
term2 <- dchi*(gamma(1-chi) - 1 + chi*gamma(chi)*pracma::psi(0, chi))
term3 <- exp(rho) * ( term2 / chi^2)
return(term1 - term3)
}
# Read in the data
anoph <- read_csv('C:/Users/cjcar/Dropbox/AnophElev/clean/Anopheles clean.csv')[,-c(1:2)]
anoph
# Recenter years, and eliminate recent years which are data deficient (relatively)
anoph %<>% mutate(Year = (Year - 1900))
hist(anoph$Year)
table(anoph$Year)
anoph %<>% filter(Year < 115)
# Pull out wellcomei and check it out
anoph %>% filter(Species == 'wellcomei') -> well
ggplot(well, aes(x = Year, y = Lat)) + #geom_point(alpha = 0.3) +
stat_binhex() + scale_fill_gradient(low = 'blue', high = 'red')
# Pull out Southern latitudes (reverse sign), one max per year, and run a regression just as a check
well %>% mutate(AbsLat = -1*Lat) %>%
group_by(Year) %>% top_n(AbsLat, n = 1) -> well.max
well.lm<- lm(AbsLat ~ Year, data = well.max)
summary(well.lm)
plot(AbsLat ~ Year, well.max)
abline(well.lm)
# Now... how to do this as a GAM
m1 <- gam(list(AbsLat ~ s(Year),
~ s(Year),
~ 1),
data = well.max, method = "REML",
family = gevlss(link = list("identity", "identity", "identity")))
summary(m1)
plot(m1, pages = 1, all.terms = TRUE)
mu <- fitted(m1)[,1]
rho <- fitted(m1)[,2]
xi <- fitted(m1)[,3]
fv <- mu + exp(rho)*(gamma(1-xi)-1)/xi
plot(fv ~ well.max$AbsLat)
plot(well.max$AbsLat ~ well.max$Year)
points(fv ~ well.max$Year, col='red')
m.lin <- gam(list(AbsLat ~ s(Year),
~ s(Year),
~ s(Year)),
data = well.max, method = "REML",
family = gevlss(link = list("identity", "identity", "logit")))
plot(m.lin)
plot(AbsLat ~ Year, well.max)
points(deshape(predict(m.lin, type = "response")) ~ well.max$Year, col='red')
warnings()
library(tidyverse)
web <- read_csv(file.choose())
web
unique(web$`Training data`)
web %>% filter(!(`Training data` == Reported))
web %>% filter(!(`Training data` == "Reported")) %>% pull(Sp) %>% paste(sep = " OR ")
web %>% filter(!(`Training data` == "Reported")) %>% pull(Sp) %>% paste(collapse = " OR ")
web %>% filter(!(`Training data` == "Reported")) %>%
mutate(Sp = paste("\"",paste(Sp, "\"", sep=''),sep=''))
web %>% filter(!(`Training data` == "Reported")) %>%
mutate(Sp = paste(""",paste(Sp, """, sep=''),sep=''))
web %>% filter(!(`Training data` == "Reported")) %>%
mutate(Sp = paste("\\"",paste(Sp, "\\"", sep=''),sep=''))
web %>% filter(!(`Training data` == "Reported")) %>%
mutate(Sp = paste("\"",paste(Sp, "\"", sep=''),sep=''))
web %>% filter(!(`Training data` == "Reported")) %>%
mutate(Sp = paste("\"",paste(Sp, "\"", sep=''),sep='')) %>%
pull(Sp) %>%
paste(collapse = " OR ")
library(tidyverse)
library(lubridate)
library(magrittr)
setwd("~/Github/Conflict-and-infectious-disease")
dons <- read_csv('./Infectious Disease Data/DON-1.1.0001.csv')
# 1. Aggregate DONs by country, month, year, outbreak identity, retain outbreak type
dons %<>% select("Year(s) of outbreak","Country","ISO code", "Disease/pathogen name", "Date recorded",
"Pathogen etiology", "DONid")
parse_date_time("1/22/1996", "m/d/y") # This was testing on one date
dons %>% mutate(time.fixed = parse_date_time(`Date recorded`, "m/d/y")) %>% # fixes the time part
mutate(month = month(time.fixed),
year = year(time.fixed)) %>%
select(-`Year(s) of outbreak`) %>%
select(-time.fixed) %>%
select(-DONid) %>%
select(-`Date recorded`) %>%
unique() -> dons
# 2. Aggregate conflict by country, month, year, retain and aggregate deaths
con <- read_csv('./Conflict Data/Georeferenced Events Data/ged201.csv')
con %>% select(country, date_start, date_end, best) %>%
mutate(date_range = interval(date_start, date_end)) -> con # Make a column that stores "interval" objects we can work with
monther <- function(x) {seq(int_start(x), int_end(x), by = 'months')} # Make a custom function to solve this problem
con$months <- lapply(con$date_range, monther) # This is because mutate has trouble with stuff like this sometimes
con %>% mutate(months = as.vector(months)) %>% separate_rows(months) -> con # This splits each month of conflict out into its own unique row
con$months[con$months %in% c("","c")] <- NA # This is a weird painful data cleaning step - ignore it
con %>% mutate(months = as.numeric(months)) %>%
mutate(months = crawl::intToPOSIX(months)) %>%
na.omit() %>% unique() %>%
mutate(month = month(months),
year = year(months)) -> con
con %>%
select(-months, -date_range, -date_start, -date_end) %>%
rename(deaths = best) %>%
rename(Country = country) -> con
con
library(tidyverse)
library(lubridate)
library(magrittr)
setwd("~/Github/Conflict-and-infectious-disease")
dons <- read_csv('./Infectious Disease Data/DON-1.1.0001.csv')
# 1. Aggregate DONs by country, month, year, outbreak identity, retain outbreak type
dons %<>% select("Year(s) of outbreak","Country","ISO code", "Disease/pathogen name", "Date recorded",
"Pathogen etiology", "DONid")
parse_date_time("1/22/1996", "m/d/y") # This was testing on one date
dons %>% mutate(time.fixed = parse_date_time(`Date recorded`, "m/d/y")) %>% # fixes the time part
mutate(month = month(time.fixed),
year = year(time.fixed)) %>%
select(-`Year(s) of outbreak`) %>%
select(-time.fixed) %>%
select(-DONid) %>%
select(-`Date recorded`) %>%
unique() -> dons
# 2. Aggregate conflict by country, month, year, retain and aggregate deaths
con <- read_csv('./Conflict Data/Georeferenced Events Data/ged201.csv')
con %>% select(country, date_start, date_end, best) %>%
mutate(date_range = interval(date_start, date_end)) -> con # Make a column that stores "interval" objects we can work with
monther <- function(x) {seq(int_start(x), int_end(x), by = 'months')} # Make a custom function to solve this problem
con$months <- lapply(con$date_range, monther) # This is because mutate has trouble with stuff like this sometimes
con %>% mutate(months = as.vector(months)) %>% separate_rows(months) -> con # This splits each month of conflict out into its own unique row
con$months[con$months %in% c("","c")] <- NA # This is a weird painful data cleaning step - ignore it
con %>% mutate(months = as.numeric(months)) %>%
mutate(months = crawl::intToPOSIX(months)) %>%
na.omit() %>% unique() %>%
mutate(month = month(months),
year = year(months)) -> con
con %>%
select(-months, -date_range, -date_start, -date_end) %>%
rename(deaths = best) %>%
rename(Country = country) -> con
View(con)
con %>% group_by(Country, month, year) %>%
summarize(deaths = sum(deaths, na.rm = TRUE)) %>% View()
con %>% group_by(Country, year, month) %>%
summarize(deaths = sum(deaths, na.rm = TRUE)) %>% View()
con %>% group_by(Country, year, month) %>%
summarize(deaths = sum(deaths, na.rm = TRUE)) %>%
filter(year > 1995) %>% View()
con %>% group_by(Country, year, month) %>%
summarize(deaths = sum(deaths, na.rm = TRUE)) %>% # Because several conflicts a month (see AFG)
filter(year > 1995) -> con # Because DONs start in 96
con
dons
library(tidyverse)
library(lubridate)
library(magrittr)
setwd("~/Github/Conflict-and-infectious-disease")
dons <- read_csv('./Infectious Disease Data/DON-1.1.0001.csv')
dons
dons$`Death count`
dons %>% group_by(DONid) %>% summarize(maxdeaths = max(`Death count`, na.rm = TRUE))
View(dons)
dons <- read_csv('./Infectious Disease Data/DON-1.1.0001.csv')
# 1. Aggregate DONs by country, month, year, outbreak identity, retain outbreak type
dons %<>% select("Year(s) of outbreak","Country","ISO code", "Disease/pathogen name", "Date recorded",
"Pathogen etiology", "DONid")
parse_date_time("1/22/1996", "m/d/y") # This was testing on one date
dons %>% mutate(time.fixed = parse_date_time(`Date recorded`, "m/d/y")) %>% # fixes the time part
mutate(month = month(time.fixed),
year = year(time.fixed)) %>%
select(-`Year(s) of outbreak`) %>%
select(-time.fixed) %>%
select(-DONid) %>%
select(-`Date recorded`) %>%
unique() -> dons
full_join(con, dons) %>%
mutate(conflict = !is.na(deaths)) %>%
rename(Disease = `Disease/pathogen name`) %>%
rename(Etiology = `Pathogen etiology`) %>%
select(-`ISO code`) %>%
select(Country, year, month, conflict, deaths, Disease, Etiology) -> donflict
donflict %>% unique() -> donflict
donflict %>% mutate(conflict2 = ((conflict==TRUE) & deaths > 25)) -> donflict.test
View(donflict)
prop.table(table(donflict$Etiology, donflict$conflict),1) %>% round(2)
prop.table(table(donflict$Disease, donflict$conflict),1) %>% data.frame() %>%
filter(Var2 == 'TRUE') %>% View()
View(dons)
